#!/bin/sh
# .git/hooks/pre-commit
#
# This hook is executed before a commit is made.
# It runs TypeScript checking, linting, and Cypress tests based on project type.

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

echo "${YELLOW}üîç Running pre-commit checks...${NC}"

# CRITICAL: Check for sensitive data in staged files
echo "${YELLOW}üîí Checking for sensitive data...${NC}"

# List of sensitive patterns to block
SENSITIVE_PATTERNS=(
    "AIza[0-9A-Za-z_-]{35}"  # Google API keys
    "sk-[0-9A-Za-z]{48}"     # OpenAI API keys
    "xoxb-[0-9]{11}-[0-9]{11}-[0-9A-Za-z]{24}"  # Slack bot tokens
    "xoxp-[0-9]{11}-[0-9]{11}-[0-9A-Za-z]{24}"  # Slack user tokens
    "https://hooks\.slack\.com/services/[A-Z0-9]+/[A-Z0-9]+/[A-Za-z0-9]+"  # Slack webhooks
    "-----BEGIN (RSA |DSA |EC |OPENSSH )?PRIVATE KEY-----"  # Private keys
    "AKIA[0-9A-Z]{16}"       # AWS access keys
    "ya29\.[0-9A-Za-z_-]+"   # Google OAuth tokens
    "1/[0-9A-Za-z_-]{43}"    # Google refresh tokens
    "AIzaSy[0-9A-Za-z_-]{33}" # Firebase API keys
    "firebase.*api.*key"      # Firebase config
    "mongodb://.*:.*@"        # MongoDB connection strings
    "postgres://.*:.*@"       # PostgreSQL connection strings
    "mysql://.*:.*@"          # MySQL connection strings
    "redis://.*:.*@"          # Redis connection strings
    "NEXT_PUBLIC_.*="         # Next.js public env vars (often contain secrets)
    "REACT_APP_.*="           # React app env vars
    "VITE_.*="                # Vite env vars
    "\.env"                   # Any .env files
    "password.*="             # Password fields
    "secret.*="               # Secret fields
    "token.*="                # Token fields
    "key.*="                  # Key fields
    "api.*key.*="             # API key fields
)

# Check staged files for sensitive patterns
STAGED_FILES=$(git diff --cached --name-only)
SENSITIVE_FOUND=false

for file in $STAGED_FILES; do
    # Skip binary files
    if git diff --cached --numstat "$file" | grep -q "^-"; then
        continue
    fi
    
    # Check file content for sensitive patterns
    for pattern in "${SENSITIVE_PATTERNS[@]}"; do
        if git show ":$file" 2>/dev/null | grep -iE "$pattern" >/dev/null 2>&1; then
            echo "${RED}‚ùå SECURITY VIOLATION DETECTED!${NC}"
            echo "${RED}File: $file${NC}"
            echo "${RED}Pattern: $pattern${NC}"
            echo "${RED}This file contains sensitive data and cannot be committed!${NC}"
            echo ""
            echo "${YELLOW}Common sensitive data types:${NC}"
            echo "  ‚Ä¢ API keys (Google, OpenAI, AWS, etc.)"
            echo "  ‚Ä¢ Database connection strings"
            echo "  ‚Ä¢ Slack webhooks and tokens"
            echo "  ‚Ä¢ Private keys and certificates"
            echo "  ‚Ä¢ Environment variables with secrets"
            echo "  ‚Ä¢ Passwords and authentication tokens"
            echo ""
            echo "${YELLOW}To fix this:${NC}"
            echo "  1. Remove the sensitive data from the file"
            echo "  2. Add the file to .gitignore if it contains secrets"
            echo "  3. Use environment variables instead"
            echo "  4. Consider using a secrets management service"
            echo ""
            SENSITIVE_FOUND=true
        fi
    done
done

if [ "$SENSITIVE_FOUND" = true ]; then
    echo "${RED}üö® COMMIT BLOCKED: Sensitive data detected!${NC}"
    echo "${RED}Please remove all sensitive information before committing.${NC}"
    exit 1
fi

echo "${GREEN}‚úÖ No sensitive data detected${NC}"

# Detect project type
REPO_NAME=$(basename "$(git rev-parse --show-toplevel)")
IS_RAILS_PROJECT=false
IS_TYPESCRIPT_PROJECT=false

if [ -f "Gemfile" ] && grep -q "rails" Gemfile 2>/dev/null; then
    IS_RAILS_PROJECT=true
fi

if [ -f "tsconfig.json" ] || [ -f "tsconfig.app.json" ] || [ -f "tsconfig.node.json" ]; then
    IS_TYPESCRIPT_PROJECT=true
fi

# Check if we're in a TypeScript project
if [ "$IS_TYPESCRIPT_PROJECT" = true ]; then
    # Permanently skip TypeScript checks for games (known issues)
    if [ "$REPO_NAME" = "TrafficRun" ] || [ "$REPO_NAME" = "CrossyRoad" ] || [ "$REPO_NAME" = "SpaceShooter" ]; then
        echo "${YELLOW}‚ö†Ô∏è  Skipping TypeScript check for $REPO_NAME (games - permanent skip)${NC}"
    else
        # Run TypeScript check
        if command -v npx >/dev/null 2>&1; then
            echo "${YELLOW}üìù Running TypeScript check...${NC}"
        
            # Run TypeScript check and capture output
            TSC_OUTPUT=$(npx tsc --noEmit 2>&1)
            TSC_EXIT_CODE=$?
            
            if [ $TSC_EXIT_CODE -eq 0 ]; then
                echo "${GREEN}‚úÖ TypeScript check passed${NC}"
            else
                echo "${RED}‚ùå TypeScript check failed${NC}"
                echo "${RED}TypeScript errors:${NC}"
                echo "$TSC_OUTPUT"
                echo "${RED}Please fix TypeScript errors before committing.${NC}"
                exit 1
            fi
        else
            echo "${YELLOW}‚ö†Ô∏è  npx not found, skipping TypeScript check${NC}"
        fi
    fi
fi

# Check if we have a linting script
if [ -f "package.json" ]; then
    # Permanently skip linting for games
    REPO_NAME=$(basename "$(git rev-parse --show-toplevel)")
    if [ "$REPO_NAME" = "TrafficRun" ] || [ "$REPO_NAME" = "CrossyRoad" ] || [ "$REPO_NAME" = "SpaceShooter" ]; then
        echo "${YELLOW}‚ö†Ô∏è  Skipping linting for $REPO_NAME (games - permanent skip)${NC}"
    else
        # Check for common linting scripts
        if npm run lint --dry-run >/dev/null 2>&1; then
            echo "${YELLOW}üßπ Running linter...${NC}"

            # Run linter and capture output
            LINT_OUTPUT=$(npm run lint 2>&1)
            LINT_EXIT_CODE=$?

            if [ $LINT_EXIT_CODE -eq 0 ]; then
                echo "${GREEN}‚úÖ Linting passed${NC}"
                
                # Auto-stage any fixes made by the linter
                if [ -n "$(git diff --cached --name-only)" ]; then
                    echo "${YELLOW}üì¶ Auto-staging linter fixes...${NC}"
                    git add .
                fi
            else
                echo "${RED}‚ùå Linting failed${NC}"
                echo "${RED}Linting errors:${NC}"
                echo "$LINT_OUTPUT"
                echo "${RED}Please fix linting errors before committing.${NC}"
                exit 1
            fi
        else
            echo "${YELLOW}‚ö†Ô∏è  No lint script found, skipping linting${NC}"
        fi
    fi

    # SKIP: Check for build script
    # if npm run build --dry-run >/dev/null 2>&1; then
    #     echo "${YELLOW}üî® Running build check...${NC}"
    #
    #     # Run build to ensure everything compiles
    #     if npm run build; then
    #         echo "${GREEN}‚úÖ Build check passed${NC}"
    #     else
    #         echo "${RED}‚ùå Build check failed${NC}"
    #         echo "${RED}Please fix build errors before committing.${NC}"
    #         exit 1
    #     fi
    # else
    #     echo "${YELLOW}‚ö†Ô∏è  No build script found, skipping build check${NC}"
    # fi
fi

# Check for Cypress tests in any project with cypress directory
if [ -f "package.json" ] && [ -d "cypress" ]; then
    # Check for test script in package.json
    if grep -q '"test"' package.json; then
        # Check if dev server is running
        if curl -s http://localhost:3000 > /dev/null 2>&1; then
            echo "${YELLOW}üß™ Running Cypress tests...${NC}"

            # Load nvm if available
            if [ -s "$HOME/.nvm/nvm.sh" ]; then
                . "$HOME/.nvm/nvm.sh"
            fi

            # Run Cypress tests and capture output
            TEST_OUTPUT=$(npm run test 2>&1)
            TEST_EXIT_CODE=$?

            if [ $TEST_EXIT_CODE -eq 0 ]; then
                echo "${GREEN}‚úÖ All Cypress tests passed${NC}"
            else
                echo "${RED}‚ùå Cypress tests failed${NC}"
                echo "${RED}Test output:${NC}"
                echo "$TEST_OUTPUT"
                echo "${RED}Please fix failing tests before committing.${NC}"
                exit 1
            fi
        else
            echo "${YELLOW}‚ö†Ô∏è  Dev server not running on port 3000, skipping Cypress tests${NC}"
            echo "${YELLOW}üí° Start server with: npm run dev${NC}"
        fi
    else
        echo "${YELLOW}‚ö†Ô∏è  No test script found, skipping Cypress tests${NC}"
    fi
fi

echo "${GREEN}üéâ All pre-commit checks passed!${NC}"
exit 0
